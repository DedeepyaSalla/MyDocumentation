{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Monaco;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red93\green108\blue121;\red255\green255\blue255;\red0\green0\blue0;
\red57\green0\blue160;\red108\green54\blue169;\red155\green35\blue147;\red50\green109\blue116;\red28\green70\blue74;
\red196\green26\blue22;}
{\*\expandedcolortbl;;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c42190\c21278\c66379;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c10981\c27276\c28869;
\csgenericrgb\c77000\c10200\c8600;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww19420\viewh14340\viewkind0
\deftab692
\pard\tx692\pardeftab692\partightenfactor0

\f0\fs28 \cf2 \cb3  Combine basics -\
\
\pard\tx720\pardeftab692\partightenfactor0
\cf2 In our day to day lives, we subscribe for an OTT stream eg: prime using prime account. So whenever, OTT wants to inform us about latest movie updates it sends those movie details to our account.\
\
Here account (subscriber) (subscriber class in iOS)\
OTT is publisher\
\pard\tx692\pardeftab692\partightenfactor0
\cf2 Whatever info we want to get through we add them in notification settings - if you want to receive movie notifications(we add that notification) - so it is notification name in iOS\
\pard\tx720\pardeftab692\partightenfactor0
\cf2 Account receives movies (whenever new movies are received) \'97 publisher publishing whenever there is change/update\
After receiving movies, we can open and watch them \'97 subscriber receives them and use that stream to display movie\
\'97 This is will go on, till subscriber cancels the subscription\
\
\pard\tx220\tx720\pardeftab692\li720\fi-720\partightenfactor0
\cf2 	1.	We know how NSNotificationCenter works in iOS.\
\pard\tx720\pardeftab692\partightenfactor0
\cf2 \
\pard\tx940\tx1440\pardeftab692\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf2 {\listtext	
\f1 \uc0\u8259 
\f0 	}Notification is identified by notificationName\
{\listtext	
\f1 \uc0\u8259 
\f0 	}whichever class/classes registers this notification, have to register the notification with name and write a function  to implement \
{\listtext	
\f1 \uc0\u8259 
\f0 	}when this notification fires. We fire notification from any other class like api class by using that notification name and by including necessary information about updates. The notification calls this function and passes data in form of dictionary. \
{\listtext	
\f1 \uc0\u8259 
\f0 	}Deregister the notification, in dealloc because at that time we don\'92t need any notifications\
\pard\tx220\tx720\tx1440\tx2160\pardeftab692\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 {\listtext	1.	}Similar, in combine framework registering means subscribing, publisher is the object which sends notification. Note:(unlike in NSNotification not just class can send notification by using notificationName, if we just add @publisher to any object (primitive data type or other type) then it becomes notifier)\
\pard\tx692\pardeftab692\partightenfactor0
\cf2 \
\pard\tx692\pardeftab692\partightenfactor0
\cf4 \
        \cf2 //--added observer n  function to execute when notification is posted\cf4 \
        \cf2 /*\cf4 \
\pard\tx692\pardeftab692\partightenfactor0
\cf2          steps\cf4 \
\cf2          1.notification name for identification\cf4 \
\cf2          2.target - which is self here\cf4 \
\cf2          3.Function to handle notification, when notificaiotn with the registered name is received\cf4 \
\cf2          */\cf4 \
        \cf5 NotificationCenter\cf4 .\cf6 default\cf4 .\cf6 addObserver\cf4 (
\f2\b \cf7 self
\f0\b0 \cf4 , \cf6 selector\cf4 : 
\f2\b \cf7 #selector
\f0\b0 \cf4 (cardTapped), \cf6 name\cf4 : \cf8 tappedNotification\cf4 , \cf6 object\cf4 : 
\f2\b \cf7 nil
\f0\b0 \cf4 )\
        \
        \cf2 //--adding publisher n subscriber (instead of adding observer, we add publisher n subscriber to accomplish same above task\cf4 \
        \cf2 /*\cf4 \
\cf2          steps\cf4 \
\cf2          must import combine 1st\cf4 \
\cf2          1.create publisher with notification name for identification and closure to execute there itself\cf4 \
\cf2          2.target - is subscriber here and its created separately. The above closure will be executed on this subscriber tager\cf4 \
\cf2          3.once publisher n subscriber are create. We add subscriber (similar to addObserver) -> that is where link between publisher n subscriber is established\cf4 \
\cf2          in above addobserver - we add target (place to receive notification) and function, notification name in addobserver single call itself\cf4 \
\cf2          but in combine -> we create target(using subscriber) separately and\cf4 \
\cf2          function to execute, notification name is added in publisher separately\cf4 \
\cf2          then link them with .subscribe method\cf4 \
\cf2          \cf4 \
\cf2          difference is for addObserver\cf4 \
\cf2         -- we make all changes in selector function (eg: if you want to label text, button image etc etc...you add all of them together here in single function)\cf4 \
\cf2          for publisher n subscriber\cf4 \
\cf2          -- that common code is added in publsiher closure n all the effected objects like label, button must become subscribers to reflect that change in their components\cf4 \
\
        \cf2 //--1\cf4 \
        
\f2\b \cf7 let
\f0\b0 \cf4  blogPostPublisher = \cf5 NotificationCenter\cf4 .\cf5 Publisher\cf4 (center: .\cf6 default\cf4 , name: .newBlogPost, object: 
\f2\b \cf7 nil
\f0\b0 \cf4 )\
            .\cf6 map\cf4  \{ (notification) -> \cf6 String\cf4 ? 
\f2\b \cf7 in
\f0\b0 \cf4 \
                
\f2\b \cf7 return
\f0\b0 \cf4  (notification.\cf6 object\cf4  
\f2\b \cf7 as
\f0\b0 \cf4 ? \cf9 BlogPost\cf4 )?.\cf6 title\cf4  ?? \cf10 ""\cf4 \
            \}\
        \cf2 //--2\cf4 \
        
\f2\b \cf7 let
\f0\b0 \cf4  lastPostLabelSubscriber = Subscribers.Assign(object: \cf8 lastPostLabel\cf4 , keyPath: \\.\cf6 text\cf4 )\
        \cf2 //--3\cf4 \
        blogPostPublisher.subscribe(lastPostLabelSubscriber)\
\
3.The advantage of adding publisher, subscriber over observer is \'97 you don\'92t need to add selector function like you do for each observer. Because for publisher, subscriber \'97 we can have one common publisher global one and use same execution \cf2 \
}